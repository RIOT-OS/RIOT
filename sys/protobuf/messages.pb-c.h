/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: messages.proto */

#ifndef PROTOBUF_C_messages_2eproto__INCLUDED
#define PROTOBUF_C_messages_2eproto__INCLUDED

#include <protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _MqttMessage MqttMessage;
typedef struct _MqttConfig MqttConfig;
typedef struct _MqttCommand MqttCommand;


/* --- enums --- */


/* --- messages --- */

struct  _MqttMessage
{
  ProtobufCMessage base;
  char *payload;
  char *topic;
};
#define MQTT_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mqtt_message__descriptor) \
    , NULL, NULL }


struct  _MqttConfig
{
  ProtobufCMessage base;
  char *hostname;
  int32_t port;
};
#define MQTT_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mqtt_config__descriptor) \
    , NULL, 0 }


struct  _MqttCommand
{
  ProtobufCMessage base;
  int32_t command;
};
#define MQTT_COMMAND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mqtt_command__descriptor) \
    , 0 }


/* MqttMessage methods */
void   mqtt_message__init
                     (MqttMessage         *message);
size_t mqtt_message__get_packed_size
                     (const MqttMessage   *message);
size_t mqtt_message__pack
                     (const MqttMessage   *message,
                      uint8_t             *out);
size_t mqtt_message__pack_to_buffer
                     (const MqttMessage   *message,
                      ProtobufCBuffer     *buffer);
MqttMessage *
       mqtt_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mqtt_message__free_unpacked
                     (MqttMessage *message,
                      ProtobufCAllocator *allocator);
/* MqttConfig methods */
void   mqtt_config__init
                     (MqttConfig         *message);
size_t mqtt_config__get_packed_size
                     (const MqttConfig   *message);
size_t mqtt_config__pack
                     (const MqttConfig   *message,
                      uint8_t             *out);
size_t mqtt_config__pack_to_buffer
                     (const MqttConfig   *message,
                      ProtobufCBuffer     *buffer);
MqttConfig *
       mqtt_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mqtt_config__free_unpacked
                     (MqttConfig *message,
                      ProtobufCAllocator *allocator);
/* MqttCommand methods */
void   mqtt_command__init
                     (MqttCommand         *message);
size_t mqtt_command__get_packed_size
                     (const MqttCommand   *message);
size_t mqtt_command__pack
                     (const MqttCommand   *message,
                      uint8_t             *out);
size_t mqtt_command__pack_to_buffer
                     (const MqttCommand   *message,
                      ProtobufCBuffer     *buffer);
MqttCommand *
       mqtt_command__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mqtt_command__free_unpacked
                     (MqttCommand *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*MqttMessage_Closure)
                 (const MqttMessage *message,
                  void *closure_data);
typedef void (*MqttConfig_Closure)
                 (const MqttConfig *message,
                  void *closure_data);
typedef void (*MqttCommand_Closure)
                 (const MqttCommand *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor mqtt_message__descriptor;
extern const ProtobufCMessageDescriptor mqtt_config__descriptor;
extern const ProtobufCMessageDescriptor mqtt_command__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_messages_2eproto__INCLUDED */
