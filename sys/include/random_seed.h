/*
 * Copyright (C) 2017 Hamburg University of Applied Sciences
 *
 * This file is subject to the terms and conditions of the GNU Lesser
 * General Public License v2.1. See the file LICENSE in the top level
 * directory for more details.
 */

/**
 * @ingroup     sys_random
 *
 * @{
 *
 * @file
 * @brief       Interface to generate "unique" PRNGs seed
 *
 * @author      Peter Kietzmann <peter.kietzmann@haw-hamburg.de>
 */

#ifndef RANDOM_SEED_H
#define RANDOM_SEED_H

#include <inttypes.h>
#include "board.h"

#ifdef __cplusplus
extern "C" {
#endif

/**
 * @brief   Set default ADC line for random seed
 *
 * @note    Override in your board configuration if needed
 */
#ifndef RANDOM_SEED_ADC_LINE
#define RANDOM_SEED_ADC_LINE        (0)
#endif

/**
 * @brief   Set default ADC resolution for random seed
 *
 * @note    Override in your board configuration if needed
 */
#ifndef RANDOM_SEED_ADC_RES
#define RANDOM_SEED_ADC_RES        ADC_RES_12BIT
#endif

/**
 * @brief    Global random seed value
 */
static volatile uint32_t global_random_seed;

/**
 * @brief   Generate a more or less unique seed for PRNGs.
 *          The quality of the seed, respectively the uniqueness, depends
 *          on the availability of hardware ressources. Sources used for seed
            generation:
 *          1. A hardware random number generator, if present. In this case, 4 bytes
               will be generated by the hwrng and returned.
 *          2. A combination of the CPU ID and single bits taken from multiple ADC samples,
               in case an ADC is present. The lower two bytes consist of ID information,
               taken by @ref luid_get(). The upper two bytes consist of sampled data where
               we shifted the LSBs of 16 samples into the return value.
 *          3. A combination of the CPU ID and the system time value. Please note
               that the CPU ID might equal between similar MCUs for some families. Here
               we combine three bytes from @ref luid_get() and one byte from @ref xtimer_now()

 *          While methods 1. and 2. are likely to result in unique values, method 3
            is prone to return equal results. Pleas check your hardware ressources!
 *
 * @return  the "unique" seed
 */
uint32_t random_seed_generate(void);


/**
 * @brief   This function sets the global variable global_random_seed to @p seed
 *
 * @param[in] seed  The seed value to set
 */
static inline void random_seed_set_global(uint32_t seed)
{
    global_random_seed = seed;
}

/**
 * @brief   This function returns the value of global_random_seed
 *
 * @note    Only use this function after you have set a global seed value
 *
 * @return  The global random seed value
 */
static inline uint32_t random_seed_get_global(void)
{
    return global_random_seed;
}

#ifdef __cplusplus
}
#endif

#endif /* RANDOM_SEED_H */
/** @} */
