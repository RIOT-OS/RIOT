# Run 'compile_and_test_for_board.py' on connected boards.
#
# This workflow will run on a RYOT machine and lunch all tests on all boards
# currently connected to that machine.
#
# Documentation:
#
# * Setup a RYOT machine:
#   https://github.com/fjmolinas/riot-ryot/blob/master/setup.md
#
# * Requirements (filled by a RYOT machine):
#   * ssh access (required secrets set)
#   * all required flashing tools installed
#   * udev rules that map all BOARD to /dev/riot/tty-$(BOARD)
#   * RIOT_MAKEFILES_GLOBAL_PRE that sets PORT and DEBUG_ADAPTER_ID for each
#     BOARD http://riot-os.org/api/advanced-build-system-tricks.html#multiple-boards-udev
#   * Static list of connected boards or make target listing them in json format
#     so that fromJSON can be used.

name: riot-ryot

on:
  # Schedule weekly runs Saturday at 00:00 on master
  schedule:
    - cron: '00 0 * * 6'
  push:
    # TODO: remove only here to demonstrate build once
    branches:
      - master
    # Run on all new release candidates
    tags:
      - '*-RC*'
env:
  RIOT_MAKEFILES_GLOBAL_PRE: /home/runner/work/ci-boards.mk.pre
  RYOT_CI_SERVER: ${{ secrets.RYOT_CI_SERVER }}
  RYOT_CI: 1

jobs:
  # Get all currently connected boards
  connected_boards:
    name: Get Connected Boards
    runs-on: ubuntu-latest
    outputs:
      boards: ${{ steps.list-boards.outputs.boards }}
    steps:
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.RYOT_PRIVATE_KEY}}
          known_hosts: ${{ secrets.RYOT_KNOWN_HOSTS }}
          config: ${{ secrets.RYOT_SSH_CONFIG }}
      - name: Checkout RIOT
        uses: actions/checkout@v2
      - name: Fetch makefile pre
        run: |
          wget -q https://raw.githubusercontent.com/fjmolinas/riot-ryot/master/local/ci-boards.mk.pre \
          -P /home/runner/work/
      - id: list-boards
        run: echo "::set-output name=boards::$(make -C ./examples/hello-world list-ci-boards-json --no-print-directory)"

  # Runs all tests on connected boards
  compile_and_test_for_board:
    name: ${{ matrix.board }}
    runs-on: ubuntu-latest
    needs: connected_boards
    # ci-riot-tribe has 8 cores
    strategy:
      max-parallel: 8
      fail-fast: false
      matrix:
        board: ${{ fromJson(needs.connected_boards.outputs.boards) }}
    env:
      BUILD_IN_DOCKER: 1
      COMPILE_AND_TEST_FOR_BOARD: ./dist/tools/compile_and_test_for_board/compile_and_test_for_board.py
      COMPILE_AND_TEST_ARGS: --with-test-only
    steps:
    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.RYOT_PRIVATE_KEY}}
        known_hosts: ${{ secrets.RYOT_KNOWN_HOSTS }}
        config: ${{ secrets.RYOT_SSH_CONFIG }}
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install iotlabcli pexpect
    - name: Pull riotbuild docker image
      run: docker pull riot/riotbuild:latest
    - name: Fetch makefile pre
      run: |
        wget -q https://raw.githubusercontent.com/fjmolinas/riot-ryot/master/local/ci-boards.mk.pre \
        -P /home/runner/work/
    - name: Checkout RIOT
      uses: actions/checkout@v2
    - name: Run compile_and_test_for_board.py
      run: |
        ${COMPILE_AND_TEST_FOR_BOARD} . ${{ matrix.board }} \
          results-${{ matrix.board }} ${COMPILE_AND_TEST_ARGS}
    - name: Archive results
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.board }}
        path: results-${{ matrix.board }}
