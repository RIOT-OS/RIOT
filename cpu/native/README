VALGRIND SUPPORT
================

If you want to use valgrind, you should recompile native with either
HAVE_VALGRIND_H or HAVE_VALGRIND_VALGRIND_H depending on the location
of the valgrind header (i.e. <valgrind.h> or <valgrind/valgrind.h>)
like this:

    CFLAGS="-DHAVE_VALGRIND_VALGRIND_H -g" make

That way native will tell valgrind about RIOTs stacks and prevent
valgrind from reporting lots of false positives.
The debug information flag "-g" is not strictly necessary, but passing
it allows valgrind to tell you precisely which code triggered the error.

Usage:
Simply pass the ordinary command to valgrind like this:

    valgrind ./bin/RIOT.elf tap0

This will yield some information whenever valgrind detects an invalid
memory access.

In order to debug the program when this occurs you can pass the
--db-attach parameter to valgrind like this:

    valgrind --db-attach=yes ./bin/RIOT.elf tap0

Now, you will be asked whether you would like to attach the running
process to gdb whenever a problem occurs.

In order for this to work under Linux 3.4 or newer, you might need to
disable the ptrace access restrictions:
As root call:

    echo 0 > /proc/sys/kernel/yama/ptrace_scope

Another helpful valgrind parameter is "--track-origins=yes" which
will allow valrgind to tell you where references to uninitialized
values stem from.


NETWORK SUPPORT
===============

If you compile RIOT for the native cpu and include the native_net
module, you need to specify a network interface like this:

    ./bin/default-native.elf tap0


SETTING UP A TAP NETWORK
========================

There is a shellscript in RIOT/cpu/native called tapsetup.sh which you
can use to create a network of tap interfaces.

Usage:
To create a bridge and two (or count at your option) tap interfaces:

    ./tapsetup.sh create [count]

To delete the bridge and all tap interfaces:

    ./tapsetup.sh delete


OSX TAP NETWORKING
==================

For tun/tap networking in OSX you will need:
http://tuntaposx.sourceforge.net/

For OSX there is a seperate script called tapsetup-osx.sh.
Run it, (it instructs you to start the RIOT instances).
In contrast to linux you will need to run 'tapsetup-osx.sh delete'
after killing your instances and rerun 'tapsetup-osx.sh create' before
restarting.
Packet delivery under OSX only works with user assistance at the
moment. run 'kill -SIGIO <RIOT process ID>' to deliver a packet to a
specific RIOT instance.

ZEP NETWORKING
==============

ZEP is the ZigBee Encapsulation Protocol and is useful if you want
debug/analyze 802.15.4 based protocols with Wireshark.
Compile with -DNATIVENET_ZEP to enable ZEP networking and pass an IP
to bind to.

If you want to use ZEP in a virtual network, you need to configure the
tap interfaces with IPs (which is not currently done by tapsetup). It
is necessary for the process to open the interface which is why you
need to pass the interfaces name in this case.

It is an error to pass the interface name of non-tap interfaces.

Usage:

    ./bin/default.elf 0.0.0.0           # bind to any interface
    ./bin/default.elf 10.0.0.1 tap0     # bind to tap interface with given IP
