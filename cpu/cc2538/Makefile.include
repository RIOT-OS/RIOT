# This CPU implementation is using the new core/CPU interface:
export CFLAGS += -DCOREIF_NG=1

# Tell the build system that the CPU depends on the Cortex-M common files:
export USEMODULE += cortex-m3_common

# Define path to cortex-m common module, which is needed for this CPU:
export CORTEX_COMMON = $(RIOTCPU)/cortex-m3_common/

# Define the linker script to use for this CPU:
export LINKERSCRIPT ?= $(RIOTCPU)/$(CPU)/$(CPU_MODEL)_linkerscript.ld

# Export the CPU model:
MODEL = $(shell echo $(CPU_MODEL) | tr 'a-z' 'A-Z')
export CFLAGS += -DCPU_MODEL_$(MODEL)

# Include CPU specific includes:
export INCLUDES += -I$(RIOTCPU)/$(CPU)/include

# Explicitly tell the linker to link the syscalls and startup code.
#   Without this the interrupt vectors will not be linked correctly!
export UNDEF += $(BINDIR)cpu/syscalls.o
export UNDEF += $(BINDIR)cpu/startup.o

# Export the peripheral drivers to be linked into the final binary:
export USEMODULE += periph

# this CPU implementation makes use of the ringbuffer, so include the lib module
export USEMODULE += lib

# CPU depends on the cortex-m common module, so include it:
include $(CORTEX_COMMON)Makefile.include

# Avoid overriding the default rule:
all:

# Rule to generate assembly listings from ELF files:
%.lst: %.elf
	$(OBJDUMP) $(OBJDUMPFLAGS) $< > $@
