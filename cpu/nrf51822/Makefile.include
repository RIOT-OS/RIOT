# this CPU implementation is using the new core/CPU interface
export CFLAGS += -DCOREIF_NG=1

# tell the build system that the CPU depends on the Cortex-M common files
export USEMODULE += cortex-m0_common

# define path to cortex-m common module, which is needed for this CPU
export CORTEX_COMMON = $(RIOTCPU)/cortex-m0_common/

# define the linker script to use for this CPU. The CPU_MODEL variable is defined in the
# board's Makefile.include. This enables multiple NRF51822 controllers with different memory to
# use the same code-base.
export LINKERSCRIPT ?= $(RIOTCPU)/$(CPU)/$(CPU_MODEL)_linkerscript.ld

#export the CPU model
MODEL = $(shell echo $(CPU_MODEL)|tr 'a-z' 'A-Z')
export CFLAGS += -DCPU_MODEL_$(MODEL)

# include CPU specific includes
export INCLUDES += -I$(RIOTCPU)/$(CPU)/include

# add the CPU specific system calls implementations for the linker
export UNDEF += $(BINDIR)cpu/syscalls.o
export UNDEF += $(BINDIR)cpu/startup.o

# export the peripheral drivers to be linked into the final binary
export USEMODULE += periph

# the syscalls implementation makes use of the ringbuffer, so include the lib module
export USEMODULE += lib

# CPU depends on the cortex-m common module, so include it
include $(CORTEX_COMMON)Makefile.include
