First off, these are the lines u-boot-make runs:
-------------------------------------------------------------------------------

£ arm-none-eabi-gcc -E -g -Os -fno-strict-aliasing -fno-common -ffixed-r8 -msoft-float -D__KERNEL__ -DTEXT_BASE=0x27800000 -I/home/leon/git/u-boot-imx/include -fno-builtin -ffreestanding -nostdinc -isystem /home/src/arm/target/lib64/gcc/arm-none-eabi/4.8.2/include -pipe -DCONFIG_ARM -D__ARM__ -marm -mabi=aapcs-linux -mno-thumb-interwork -march=armv5 -include /home/leon/git/u-boot-imx/include/u-boot/u-boot.lds.h -ansi -D__ASSEMBLY__ -P - </home/leon/git/u-boot-imx/board/freescale/mx6solo_RIoTboard/u-boot.lds >u-boot.lds

£ UNDEF_SYM=`arm-none-eabi-objdump -x board/freescale/mx6solo_RIoTboard/libmx6solo_RIoTboard.a lib_generic/libgeneric.a lib_generic/lzma/liblzma.a lib_generic/lzo/liblzo.a board/freescale/common/libfreescale.a cpu/arm_cortexa8/libarm_cortexa8.a cpu/arm_cortexa8/mx6/libmx6.a lib_arm/libarm.a fs/cramfs/libcramfs.a fs/fat/libfat.a fs/fdos/libfdos.a fs/jffs2/libjffs2.a fs/reiserfs/libreiserfs.a fs/ext2/libext2fs.a fs/yaffs2/libyaffs2.a fs/ubifs/libubifs.a net/libnet.a disk/libdisk.a drivers/bios_emulator/libatibiosemu.a drivers/block/libblock.a drivers/dma/libdma.a drivers/fpga/libfpga.a drivers/gpio/libgpio.a drivers/hwmon/libhwmon.a drivers/i2c/libi2c.a drivers/input/libinput.a drivers/misc/libmisc.a drivers/mmc/libmmc.a drivers/mtd/libmtd.a drivers/mtd/nand/libnand.a drivers/mtd/onenand/libonenand.a drivers/mtd/ubi/libubi.a drivers/mtd/spi/libspi_flash.a drivers/net/libnet.a drivers/net/phy/libphy.a drivers/net/sk98lin/libsk98lin.a drivers/pci/libpci.a drivers/pcmcia/libpcmcia.a drivers/power/libpower.a drivers/spi/libspi.a drivers/fastboot/libfastboot.a drivers/rtc/librtc.a drivers/serial/libserial.a drivers/twserial/libtws.a drivers/usb/gadget/libusb_gadget.a drivers/usb/host/libusb_host.a drivers/usb/musb/libusb_musb.a drivers/video/libvideo.a drivers/watchdog/libwatchdog.a common/libcommon.a libfdt/libfdt.a api/libapi.a post/libpost.a | sed -n -e 's/.*\(__u_boot_cmd_.*\)/-u\1/p'|sort|uniq`; \
£ cd /home/leon/git/u-boot-imx && \
£ arm-none-eabi-ld -Bstatic -T u-boot.lds -Ttext 0x27800000 $UNDEF_SYM cpu/arm_cortexa8/start.o \
£ --start-group lib_generic/libgeneric.a lib_generic/lzma/liblzma.a lib_generic/lzo/liblzo.a board/freescale/common/libfreescale.a cpu/arm_cortexa8/libarm_cortexa8.a cpu/arm_cortexa8/mx6/libmx6.a lib_arm/libarm.a fs/cramfs/libcramfs.a fs/fat/libfat.a fs/fdos/libfdos.a fs/jffs2/libjffs2.a fs/reiserfs/libreiserfs.a fs/ext2/libext2fs.a fs/yaffs2/libyaffs2.a fs/ubifs/libubifs.a net/libnet.a disk/libdisk.a drivers/bios_emulator/libatibiosemu.a drivers/block/libblock.a drivers/dma/libdma.a drivers/fpga/libfpga.a drivers/gpio/libgpio.a drivers/hwmon/libhwmon.a drivers/i2c/libi2c.a drivers/input/libinput.a drivers/misc/libmisc.a drivers/mmc/libmmc.a drivers/mtd/libmtd.a drivers/mtd/nand/libnand.a drivers/mtd/onenand/libonenand.a drivers/mtd/ubi/libubi.a drivers/mtd/spi/libspi_flash.a drivers/net/libnet.a drivers/net/phy/libphy.a drivers/net/sk98lin/libsk98lin.a drivers/pci/libpci.a drivers/pcmcia/libpcmcia.a drivers/power/libpower.a drivers/spi/libspi.a drivers/fastboot/libfastboot.a drivers/rtc/librtc.a drivers/serial/libserial.a drivers/twserial/libtws.a drivers/usb/gadget/libusb_gadget.a drivers/usb/host/libusb_host.a drivers/usb/musb/libusb_musb.a drivers/video/libvideo.a drivers/watchdog/libwatchdog.a common/libcommon.a libfdt/libfdt.a api/libapi.a post/libpost.a board/freescale/mx6solo_RIoTboard/libmx6solo_RIoTboard.a --end-group \
£ /home/leon/git/u-boot-imx/lib_arm/eabi_compat.o -L /home/src/arm/target/lib64/gcc/arm-none-eabi/4.8.2 -lgcc -Map u-boot.map -o u-boot
£ arm-none-eabi-objcopy -O srec u-boot u-boot.srec
£ arm-none-eabi-objcopy --gap-fill=0xff -O binary u-boot u-boot.bin
-------------------------------------------------------------------------------

An archive (libmx6solo_RIoTboard.a) was created from flash_header.S, lowlevel_init.S and mx6solo_RIoTboard.c.
-DTEXT_BASE=0x27800000 ? This is an 632MB offset. As the u-boot-image is only a few KBs in size, my guess is that this is where u-boot copies itself at run-time to be out of the way of registers, linux kernel and stuff??
OK: RIoT is significantly smaller than the linux-kernel and, using RIoT-OS, the bootloader is not seperated from the OS.

the "UNDEF_SYM" line generates a linker script which is syntactically identical to the one supplied on stdin (except for an underscore in line 70 of which I don't know whether it has any effect)

The value of UNDEF_SYM - for me - is:
-------------------------------------------------------------------------------
-u__u_boot_cmd_autoscr -u__u_boot_cmd_base -u__u_boot_cmd_bdinfo -u__u_boot_cmd_bmp -u__u_boot_cmd_boot -u__u_boot_cmd_bootd -u__u_boot_cmd_bootm -u__u_boot_cmd_bootp -u__u_boot_cmd_clk -u__u_boot_cmd_cls -u__u_boot_cmd_cmp -u__u_boot_cmd_coninfo -u__u_boot_cmd_cp -u__u_boot_cmd_crc32 -u__u_boot_cmd_destroyenv -u__u_boot_cmd_dhcp -u__u_boot_cmd_download_mode -u__u_boot_cmd_echo -u__u_boot_cmd_end -u__u_boot_cmd_erase -u__u_boot_cmd_ext2load -u__u_boot_cmd_ext2ls -u__u_boot_cmd_fatinfo -u__u_boot_cmd_fatload -u__u_boot_cmd_fatls -u__u_boot_cmd_flinfo -u__u_boot_cmd_go -u__u_boot_cmd_help -u__u_boot_cmd_i2c -u__u_boot_cmd_iminfo -u__u_boot_cmd_imxotp -u__u_boot_cmd_imxtract -u__u_boot_cmd_itest -u__u_boot_cmd_loadb -u__u_boot_cmd_loads -u__u_boot_cmd_loady -u__u_boot_cmd_loop -u__u_boot_cmd_md -u__u_boot_cmd_mii -u__u_boot_cmd_mm -u__u_boot_cmd_mmc -u__u_boot_cmd_mmcinfo -u__u_boot_cmd_mtest -u__u_boot_cmd_mw -u__u_boot_cmd_nfs -u__u_boot_cmd_nm -u__u_boot_cmd_ping -u__u_boot_cmd_printenv -u__u_boot_cmd_protect -u__u_boot_cmd_question_mark -u__u_boot_cmd_rarpboot -u__u_boot_cmd_regul -u__u_boot_cmd_reset -u__u_boot_cmd_run -u__u_boot_cmd_saveenv -u__u_boot_cmd_setenv -u__u_boot_cmd_sf -u__u_boot_cmd_sleep -u__u_boot_cmd_source -u__u_boot_cmd_sspi -u__u_boot_cmd_start -u__u_boot_cmd_tftpboot -u__u_boot_cmd_version
-------------------------------------------------------------------------------

The purpose of this is explained on the u-boot-mailing-list:
In order to keep those symbols while linking full u-boot, they are undef'd. (I don't really see the logic there. The important thing is: they are kept)
While using smart linking they could be discarded because the are called nowhere due to the way u-boot processes commands at runtime (instead, they are put into a static array by the linker).
"This makes it possible for the final link to extract all commands compiled into any object code and construct a static array so the command can be found in an array starting at __u_boot_cmd_start."
