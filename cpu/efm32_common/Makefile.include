# this CPU implementation is using the new core/CPU interface
export CFLAGS += -DCOREIF_NG=1

# tell the build system that the CPU depends on the Cortex-M common files
export USEMODULE += cortex-m3_common

# define path to cortex-m common module, which is needed for this CPU
export CORTEX_COMMON = $(RIOTCPU)/cortex-m3_common/

#export the CPU model
MODEL = $(shell echo $(CPU_MODEL)|tr 'a-z' 'A-Z')
export CFLAGS += -DCPU_MODEL_$(MODEL)

CPU_UPPER = $(shell echo $(CPU)|tr 'a-z' 'A-Z')

# define the linker script to use for this CPU. The CPU_MODEL variable is defined in the
# board's Makefile.include. This enables multiple STMF0 controllers with different memory to
# use the same code-base.
export LINKERSCRIPT = $(RIOTCPU)/efm32_common/Device/SiliconLabs/$(CPU_UPPER)/Source/GCC/$(CPU).ld

# include CPU specific includes
export INCLUDES += -I$(RIOTCPU)/efm32_common/CMSIS/Include
export INCLUDES += -I$(RIOTCPU)/efm32_common/Device/SiliconLabs/$(CPU_UPPER)/Include
export INCLUDES += -I$(RIOTCPU)/efm32_common/emlib/inc
export INCLUDES += -I$(RIOTCPU)/efm32_common/include

# riot standard includes
export INCLUDES += -I$(RIOTBASE)/core/include
export INCLUDES += -I$(RIOTBASE)/drivers/include
export INCLUDES += -I$(RIOTBASE)/sys/include

# export the peripheral drivers to be linked into the final binary
export USEMODULE += periph drivers emlib

# CPU depends on the cortex-m common module, so include it
include $(CORTEX_COMMON)Makefile.include
