# Target architecture for the build. Use msp430 if you are unsure.
export TARGET_ARCH ?= msp430

# define build specific options
CFLAGS_CPU   = -mmcu=$(CPU_MODEL) -std=gnu99
CFLAGS_LINK  = -ffunction-sections -fdata-sections
CFLAGS_DBG  ?= -gdwarf-2
CFLAGS_OPT  ?= -Os
# export compiler flags
export CFLAGS += $(CFLAGS_CPU) $(CFLAGS_LINK) $(CFLAGS_DBG) $(CFLAGS_OPT)
# export assmebly flags
export ASFLAGS += $(CFLAGS_CPU) --defsym $(CPU_MODEL)=1 $(CFLAGS_DBG)
# export linker flags
export LINKFLAGS += $(CFLAGS_CPU) $(CFLAGS_DBG) $(CFLAGS_OPT) -Wl,--gc-sections -static -lgcc

# Import all toolchain settings
include $(RIOTCPU)/Makefile.include.$(TOOLCHAIN)

# Test that the compiler exists, try to adjust PREFIX otherwise
ifeq (,$(shell sh -c 'command -v $(CC)'))
export PREFIX:=$(PREFIX)elf-
endif

ifeq (,$(MSP430_USE_NEWLIB))
# MSPGCC (the old compiler) is usually used with msp-libc, while the new
# upstream GCC msp430 port (sometimes referred to as the Red Hat MSP430
# compiler) is usually accompanied by newlib.
# The new msp430 port started with version 4.9.x, the latest release of the old
# mspgcc is 4.6.3 from the beginning of 2012 and doesn't look like it will receive
# any updates. We use the numbers to decide if we use newlib by default.
CC_VERSION := $(shell $(CC) -dumpversion 2>&1)

ifeq (4.9, $(firstword $(sort 4.9 $(CC_VERSION))))
# CC_VERSION is at least 4.9
MSP430_USE_NEWLIB := 1
else
MSP430_USE_NEWLIB := 0
endif
endif

ifeq (1,$(MSP430_USE_NEWLIB))

# Temporarily disabled memory allocation from heap
export CFLAGS += -DDISABLE_HEAP_ALLOC

# use newlib as libc
export USEMODULE += newlib

# use the nano-specs of Newlib when available
ifeq ($(shell $(LINK) -specs=nano.specs -E - 2>/dev/null >/dev/null </dev/null ; echo $$?),0)
export LINKFLAGS += -specs=nano.specs -lc -lnosys
endif

endif
