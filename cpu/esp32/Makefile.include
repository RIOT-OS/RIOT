# ESP32x specific flashing options
FLASH_CHIP  = $(CPU_FAM)

export ESP32_SDK_DIR ?= $(PKGDIRBASE)/esp32_sdk

ifneq (,$(filter usb_board_reset,$(USEMODULE)))
  include $(RIOTMAKE)/tools/usb_board_reset.mk
endif

# Serial flasher config as used by the ESP-IDF, be careful when overriding them.
# They have to be exported to use same values in subsequent makefiles.
ifeq (esp32,$(CPU_FAM))
  export FLASH_MODE ?= dout
  export FLASH_FREQ ?= 40m
  export FLASH_SIZE ?= 2
  BOOTLOADER_POS = 0x1000
else ifneq (,$(filter esp32c3 esp32c6 esp32s3,$(CPU_FAM)))
  export FLASH_MODE ?= dio
  export FLASH_FREQ ?= 80m
  export FLASH_SIZE ?= 2
  BOOTLOADER_POS = 0x0000
else ifeq (esp32s2,$(CPU_FAM))
  export FLASH_MODE ?= qio
  export FLASH_FREQ ?= 80m
  export FLASH_SIZE ?= 4
  BOOTLOADER_POS = 0x1000
else ifeq (esp32h2,$(CPU_FAM))
  export FLASH_MODE ?= dio
  export FLASH_FREQ ?= 48m
  export FLASH_SIZE ?= 2
  BOOTLOADER_POS = 0x0000
else
  $(error No known flash config for ESP32x SoC variant (family): $(CPU_FAM))
endif

# RAM configuration
ifeq (esp32,$(CPU_FAM))
  ifneq (,$(filter esp_idf_ble,$(USEMODULE)))
    # If BT is used, the first 0xdb5c bytes (ca. 55 kbytes) of RAM are shared
    # with the BT controller. Usable RAM region the starts at 0x3FFBDB5C.
    # We reduce the usable size by 55 kByte.
    RAM_LEN = 120K
    RAM_START_ADDR = 0x3FFBE000
  else
    RAM_LEN = 176K
    RAM_START_ADDR = 0x3FFB0000
  endif
else ifeq (esp32s2,$(CPU_FAM))
  # The ESP32-S2 configuration in RIOT uses a data cache size and an
  # instruction cache size of 8 kByte each. This means that the usable RAM
  # starts at 0x3FFB0000 + 0x4000 and the size is reduced by 0x4000
  RAM_LEN = 176K
  RAM_START_ADDR = 0x3FFB4000
else ifeq (esp32s3,$(CPU_FAM))
  RAM_LEN = 264K
  RAM_START_ADDR = 0x3FC88000
else ifeq (esp32c3,$(CPU_FAM))
  # Note: The address space is shared between the data and the instruction bus.
  # Therefore, a part at the beginning of the RAM is not usable since it is
  # used as instruction cache via the instruction bus.
  RAM_LEN = 320K
  RAM_START_ADDR = 0x3FC80000
else ifeq (esp32c6,$(CPU_FAM))
  # ESP32-C6 has 512 kByte RAM but the 2nd stage bootloader starts at 0x4086E610
  # so that there are only 452.112 byte (about 441 kByte) remaining
  RAM_LEN = 441K
  RAM_START_ADDR = 0x40800000
else ifeq (esp32h2,$(CPU_FAM))
  # ESP32-H2 has 320 kByte RAM but the 2nd stage bootloader starts at 0x4083EFD0
  # so that there are only 258,000 byte (about 250 kByte) remaining
  RAM_LEN = 250K
  RAM_START_ADDR = 0x40800000
else
  $(error Missing ram configuration for ESP32x SoC variant (family): $(CPU_FAM))
endif

ifneq (,$(filter periph_flashpage,$(USEMODULE)))
  ifneq (,$(CONFIG_ESP_FLASHPAGE_CAPACITY_64K))
    FLASHFILE_POS = 0x20000
    FLASHPAGE_CAP = 0x10000
  else ifneq (,$(CONFIG_ESP_FLASHPAGE_CAPACITY_128K))
    FLASHFILE_POS = 0x30000
    FLASHPAGE_CAP = 0x20000
  else ifneq (,$(CONFIG_ESP_FLASHPAGE_CAPACITY_256K))
    FLASHFILE_POS = 0x50000
    FLASHPAGE_CAP = 0x40000
  else ifneq (,$(CONFIG_ESP_FLASHPAGE_CAPACITY_512K))
    FLASHFILE_POS = 0x90000
    FLASHPAGE_CAP = 0x80000
  else ifneq (,$(CONFIG_ESP_FLASHPAGE_CAPACITY_1M))
    FLASHFILE_POS = 0x110000
    FLASHPAGE_CAP = 0x100000
  else ifneq (,$(CONFIG_ESP_FLASHPAGE_CAPACITY_2M))
    FLASHFILE_POS = 0x210000
    FLASHPAGE_CAP = 0x200000
  else
    # use 512 kByte for periph_flashpage by default
    FLASHFILE_POS = 0x90000
    FLASHPAGE_CAP = 0x80000
    CFLAGS += -DCONFIG_ESP_FLASHPAGE_CAPACITY_512K
  endif
  FLASHPAGE_ADDR_START = 0x10000
  FLASHPAGE_ADDR_END = $(FLASHFILE_POS)
  CFLAGS += -DFLASHPAGE_ADDR_START=$(FLASHPAGE_ADDR_START)
  CFLAGS += -DFLASHPAGE_ADDR_END=$(FLASHPAGE_ADDR_END)
endif

FLASHFILE_POS ?= 0x10000

include $(RIOTCPU)/esp_common/Makefile.include

# regular Makefile

ifeq (xtensa,$(CPU_ARCH))
  TARGET_ARCH ?= xtensa-$(CPU_FAM)-elf
else ifeq (rv32,$(CPU_ARCH))
  TARGET_ARCH ?= riscv32-esp-elf
else
  $(error Unknown ESP32x SoC architecture: $(CPU_ARCH))
endif

PSEUDOMODULES += esp_ble
PSEUDOMODULES += esp_bootloader
PSEUDOMODULES += esp_gdbstub
PSEUDOMODULES += esp_hw_counter
PSEUDOMODULES += esp_idf_gpio_hal
PSEUDOMODULES += esp_idf_phy
PSEUDOMODULES += esp_i2c_hw
PSEUDOMODULES += esp_jtag
PSEUDOMODULES += esp_lcd_gpio
PSEUDOMODULES += esp_rtc_timer_32k
PSEUDOMODULES += esp_spi_ram
PSEUDOMODULES += esp_spi_oct
PSEUDOMODULES += esp_wifi_enterprise
PSEUDOMODULES += stdio_usb_serial_jtag_rx

INCLUDES += -I$(RIOTCPU)/$(CPU)/esp-idf/include
INCLUDES += -I$(RIOTCPU)/$(CPU)/esp-idf/include/log
INCLUDES += -I$(RIOTCPU)/$(CPU)/vendor/include

INCLUDES += -I$(ESP32_SDK_DIR)/components
INCLUDES += -I$(ESP32_SDK_DIR)/components/bootloader_support/include
INCLUDES += -I$(ESP32_SDK_DIR)/components/driver/deprecated
INCLUDES += -I$(ESP32_SDK_DIR)/components/esp_adc/include
INCLUDES += -I$(ESP32_SDK_DIR)/components/esp_adc/$(CPU_FAM)/include
INCLUDES += -I$(ESP32_SDK_DIR)/components/esp_common/include
INCLUDES += -I$(ESP32_SDK_DIR)/components/esp_driver_gpio/include
INCLUDES += -I$(ESP32_SDK_DIR)/components/esp_driver_uart/include
INCLUDES += -I$(ESP32_SDK_DIR)/components/esp_hw_support/include
INCLUDES += -I$(ESP32_SDK_DIR)/components/esp_hw_support/include/soc
INCLUDES += -I$(ESP32_SDK_DIR)/components/esp_hw_support/port/$(CPU_FAM)/include
INCLUDES += -I$(ESP32_SDK_DIR)/components/esp_rom/$(CPU_FAM)
INCLUDES += -I$(ESP32_SDK_DIR)/components/esp_rom/include
INCLUDES += -I$(ESP32_SDK_DIR)/components/esp_rom/$(CPU_FAM)/include
INCLUDES += -I$(ESP32_SDK_DIR)/components/esp_rom/$(CPU_FAM)/include/$(CPU_FAM)
INCLUDES += -I$(ESP32_SDK_DIR)/components/esp_system/include
INCLUDES += -I$(ESP32_SDK_DIR)/components/esp_system/port/include
INCLUDES += -I$(ESP32_SDK_DIR)/components/esp_timer/include
INCLUDES += -I$(ESP32_SDK_DIR)/components/hal/$(CPU_FAM)/include
INCLUDES += -I$(ESP32_SDK_DIR)/components/hal/include
INCLUDES += -I$(ESP32_SDK_DIR)/components/hal/platform_port/include
INCLUDES += -I$(ESP32_SDK_DIR)/components/heap/include
INCLUDES += -I$(ESP32_SDK_DIR)/components/log/include
INCLUDES += -I$(ESP32_SDK_DIR)/components/newlib/platform_include
INCLUDES += -I$(ESP32_SDK_DIR)/components/soc/include
INCLUDES += -I$(ESP32_SDK_DIR)/components/soc/$(CPU_FAM)/include
INCLUDES += -I$(ESP32_SDK_DIR)/components/soc/$(CPU_FAM)/register
INCLUDES += -I$(ESP32_SDK_DIR)/components/spi_flash/include
INCLUDES += -I$(ESP32_SDK_DIR)/components/spi_flash/include/spi_flash

ifneq (,$(filter riscv32%,$(TARGET_ARCH)))
  INCLUDES += -I$(ESP32_SDK_DIR)/components/riscv/include
endif

ifneq (,$(filter xtensa%,$(TARGET_ARCH)))
  INCLUDES += -I$(ESP32_SDK_DIR)/components/xtensa/include
  INCLUDES += -I$(ESP32_SDK_DIR)/components/xtensa/$(CPU_FAM)/include
endif

ifneq (,$(filter esp_ble,$(USEMODULE)))
  ifneq (,$(filter esp32 esp32c6 esp32h2,$(CPU_FAM)))
    INCLUDES += -I$(ESP32_SDK_DIR)/components/bt/include/$(CPU_FAM)/include
  else ifneq (,$(filter esp32s3 esp32c3,$(CPU_FAM)))
    INCLUDES += -I$(ESP32_SDK_DIR)/components/bt/include/esp32c3/include
  endif
  ifneq (,$(filter esp32c6 esp32h2,$(CPU_FAM)))
    CFLAGS += -Ddefault_RNG_defined=0
    CFLAGS += -DNIMBLE_OS_MSYS_INIT_IN_CONTROLLER=1
    CFLAGS += -DNIMBLE_G_MSYS_POOL_LIST_IN_CONTROLLER=1
    INCLUDES += -I$(ESP32_SDK_DIR)/components/esp_hw_support/port/$(CPU_FAM)/private_include
  endif
endif

ifneq (,$(filter esp_ble_nimble,$(USEMODULE)))
  INCLUDES += -I$(RIOTCPU)/$(CPU)/include/esp_ble_nimble
  INCLUDES += $(NIMIBASE)/nimble/transport/common/hci_h4/include
endif

ifneq (,$(filter esp_i2c_hw,$(USEMODULE)))
  INCLUDES += -I$(ESP32_SDK_DIR)/components/esp_driver_i2c/include
  INCLUDES += -I$(ESP32_SDK_DIR)/components/esp_pm/include
endif

ifneq (,$(filter esp_spi_ram,$(USEMODULE)))
  INCLUDES += -I$(ESP32_SDK_DIR)/components/esp_psram/include
endif

ifneq (,$(filter esp_idf_lcd,$(USEMODULE)))
  INCLUDES += -I$(ESP32_SDK_DIR)/components/esp_driver_i2c/include
  INCLUDES += -I$(ESP32_SDK_DIR)/components/esp_driver_spi/include
  INCLUDES += -I$(ESP32_SDK_DIR)/components/esp_lcd/include
  INCLUDES += -I$(ESP32_SDK_DIR)/components/esp_lcd/priv_include
endif

ifneq (,$(filter esp_idf_nvs_flash,$(USEMODULE)))
  INCLUDES += -I$(ESP32_SDK_DIR)/components/esp_partition/include
  INCLUDES += -I$(ESP32_SDK_DIR)/components/nvs_flash/include
  CFLAGS += -DMBEDTLS_CIPHER_MODE_XTS
endif

ifneq (,$(filter esp_idf_spi_flash,$(USEMODULE)))
  INCLUDES += -I$(ESP32_SDK_DIR)/components/spi_flash/include
endif

ifneq (,$(filter esp_idf_usb,$(USEMODULE)))
  INCLUDES += -I$(ESP32_SDK_DIR)/components/usb/include
endif

ifneq (,$(filter esp_wifi_any,$(USEMODULE)))
  INCLUDES += -I$(ESP32_SDK_DIR)/components/bootloader_support/include
  INCLUDES += -I$(ESP32_SDK_DIR)/components/esp_eth/include
  INCLUDES += -I$(ESP32_SDK_DIR)/components/esp_event/include
  INCLUDES += -I$(ESP32_SDK_DIR)/components/esp_netif/include
  INCLUDES += -I$(ESP32_SDK_DIR)/components/esp_wifi/include
  INCLUDES += -I$(ESP32_SDK_DIR)/components/nvs_flash/include
endif

ifneq (,$(filter esp_wifi_enterprise,$(USEMODULE)))
  INCLUDES += -I$(ESP32_SDK_DIR)/components/wpa_supplicant/esp_supplicant/include
endif

ifneq (,$(filter esp_eth,$(USEMODULE)))
  INCLUDES += -I$(RIOTCPU)/$(CPU)/esp-eth
  INCLUDES += -I$(ESP32_SDK_DIR)/components/esp_eth/include
  INCLUDES += -I$(ESP32_SDK_DIR)/components/esp_event/include
  INCLUDES += -I$(ESP32_SDK_DIR)/components/esp_netif/include
  INCLUDES += -I$(ESP32_SDK_DIR)/components/esp_wifi/include
endif

ifneq (,$(filter esp_ieee802154,$(USEMODULE)))
  INCLUDES += -I$(RIOTCPU)/$(CPU)/esp-ieee802154
  INCLUDES += -I$(ESP32_SDK_DIR)/components/ieee802154/include
  INCLUDES += -I$(ESP32_SDK_DIR)/components/esp_coex/include
endif

ifneq (,$(filter periph_sdmmc,$(USEMODULE)))
  INCLUDES += -I$(ESP32_SDK_DIR)/components/esp_driver_sdmmc/include
  INCLUDES += -I$(ESP32_SDK_DIR)/components/sdmmc/include
  INCLUDES += -I$(ESP32_SDK_DIR)/components/esp_hw_support/dma/include
endif

ifneq (,$(filter ws281x_esp32_hw,$(USEMODULE)))
  INCLUDES += -I$(ESP32_SDK_DIR)/components/esp_driver_rmt/include
  CFLAGS += -DCONFIG_RMT_SUPPRESS_DEPRECATE_WARN
endif

CFLAGS += -DCPU_FAM_$(call uppercase_and_underscore,$(CPU_FAM))

# we use ESP32x SoC only in single core mode
CFLAGS += -DCONFIG_ESP_SYSTEM_SINGLE_CORE_MODE
CFLAGS += -DCONFIG_FREERTOS_UNICORE

# other ESP-IDF configurations
CFLAGS += -DCONFIG_IDF_TARGET_$(call uppercase_and_underscore,$(CPU_FAM))
CFLAGS += -DCONFIG_IDF_TARGET=\"$(CPU_FAM)\"
CFLAGS += -DESP_PLATFORM
CFLAGS += -DLOG_TAG_IN_BRACKETS
CFLAGS += -DRIOT_BUILD=1
CFLAGS += -DSOC_MMU_PAGE_SIZE=CONFIG_MMU_PAGE_SIZE

# extend CFLAGS by the corresponding FLASH_FREQ
ifeq (20m,$(FLASH_FREQ))
  CFLAGS += -DCONFIG_ESPTOOLPY_FLASHFREQ_20M
else ifeq (26m,$(FLASH_FREQ))
  CFLAGS += -DCONFIG_ESPTOOLPY_FLASHFREQ_26M
else ifeq (40m,$(FLASH_FREQ))
  CFLAGS += -DCONFIG_ESPTOOLPY_FLASHFREQ_40M
else ifeq (80m,$(FLASH_FREQ))
  CFLAGS += -DCONFIG_ESPTOOLPY_FLASHFREQ_80M
else ifeq (120m,$(FLASH_FREQ))
  CFLAGS += -DCONFIG_ESPTOOLPY_FLASHFREQ_120M
endif

#extend CFLAGS by the corresponding FLASH_SIZE
ifeq (1,$(FLASH_SIZE))
  CFLAGS += -DCONFIG_ESPTOOLPY_FLASHSIZE_1MB
else ifeq (2,$(FLASH_SIZE))
  CFLAGS += -DCONFIG_ESPTOOLPY_FLASHSIZE_2MB
else ifeq (4,$(FLASH_SIZE))
  CFLAGS += -DCONFIG_ESPTOOLPY_FLASHSIZE_4MB
else ifeq (8,$(FLASH_SIZE))
  CFLAGS += -DCONFIG_ESPTOOLPY_FLASHSIZE_8MB
else ifeq (16,$(FLASH_SIZE))
  CFLAGS += -DCONFIG_ESPTOOLPY_FLASHSIZE_16MB
endif

# shortcuts used by ESP-IDF
CFLAGS += -Dasm=__asm
CFLAGS += -Dtypeof=__typeof__
CFLAGS += -D_CONST=const

# TODO no relaxation yet
ifneq (,$(filter riscv%,$(TARGET_ARCH)))
  CFLAGS += -DCONFIG_IDF_TARGET_ARCH_RISCV
  CFLAGS += -mno-relax -mabi=ilp32 -DRISCV_NO_RELAX
  CFLAGS += -fno-jump-tables
  LDGENFLAGS += -DCONFIG_IDF_TARGET_ARCH_RISCV
  LINKFLAGS += -mno-relax -mabi=ilp32
  LINKFLAGS += -T$(ESP32_SDK_DIR)/components/riscv/ld/rom.api.ld
  GCC_NEW_RISCV_ISA ?= $(shell echo "typedef int dont_be_pedantic;" | \
                               $(TARGET_ARCH)-gcc -march=rv32imac -mabi=ilp32 \
                                                  -misa-spec=2.2 -E - > /dev/null 2>&1 && \
                               echo 1 || echo 0)
  ifeq (1,$(GCC_NEW_RISCV_ISA))
    CFLAGS += -misa-spec=2.2
  endif

  ifeq (esp32c3,$(CPU_FAM))
    CFLAGS += -march=rv32imc_zicsr_zifencei
    LINKFLAGS += -march=rv32imc_zicsr_zifencei
  else ifneq (,$(filter esp32c6 esp32h2,$(CPU_FAM)))
    CFLAGS += -march=rv32imac_zicsr_zifencei
    LINKFLAGS += -march=rv32imac_zicsr_zifencei
  else
      $(error Missing -march option for ESP32x RISC-V SoC variant: $(CPU_FAM))
  endif
endif

ifneq (,$(filter xtensa%,$(TARGET_ARCH)))
  CFLAGS += -DCONFIG_IDF_TARGET_ARCH_XTENSA
  LDGENFLAGS += -DCONFIG_IDF_TARGET_ARCH_XTENSA
  LINKFLAGS += -L$(ESP32_SDK_DIR)/components/xtensa/$(CPU_FAM)
  ARCHIVES += -lxt_hal
endif

LINKFLAGS += -L$(RIOTCPU)/$(CPU)/ld/$(CPU_FAM)/

LINKFLAGS += -T$(BINDIR)/memory.ld
LINKFLAGS += -T$(BINDIR)/sections.ld

LINKFLAGS += -T$(ESP32_SDK_DIR)/components/soc/$(CPU_FAM)/ld/$(CPU_FAM).peripherals.ld
LINKFLAGS += -T$(ESP32_SDK_DIR)/components/esp_rom/$(CPU_FAM)/ld/$(CPU_FAM).rom.ld
LINKFLAGS += -T$(ESP32_SDK_DIR)/components/esp_rom/$(CPU_FAM)/ld/$(CPU_FAM).rom.api.ld
LINKFLAGS += -T$(ESP32_SDK_DIR)/components/esp_rom/$(CPU_FAM)/ld/$(CPU_FAM).rom.libgcc.ld

ifeq (esp32,$(CPU_FAM))
  # We don't use newlibc functions in ROM for ESP32
  # LINKFLAGS += -T$(ESP32_SDK_DIR)/components/esp_rom/$(CPU_FAM)/ld/$(CPU_FAM).rom.newlib-data.ld
  # LINKFLAGS += -T$(ESP32_SDK_DIR)/components/esp_rom/$(CPU_FAM)/ld/$(CPU_FAM).rom.newlib-funcs.lds
else ifeq (esp32s2,$(CPU_FAM))
  # We don't use newlibc functions in ROM for ESP32-S2
  # LINKFLAGS += -T$(ESP32_SDK_DIR)/components/esp_rom/$(CPU_FAM)/ld/$(CPU_FAM).rom.newlib-data.ld
  # LINKFLAGS += -T$(ESP32_SDK_DIR)/components/esp_rom/$(CPU_FAM)/ld/$(CPU_FAM).rom.newlib-funcs.ld
  LINKFLAGS += -T$(ESP32_SDK_DIR)/components/esp_rom/$(CPU_FAM)/ld/$(CPU_FAM).rom.spiflash_legacy.ld
else ifeq (esp32s3,$(CPU_FAM))
  LINKFLAGS += -T$(ESP32_SDK_DIR)/components/esp_rom/$(CPU_FAM)/ld/$(CPU_FAM).rom.ble_cca.ld
  LINKFLAGS += -T$(ESP32_SDK_DIR)/components/esp_rom/$(CPU_FAM)/ld/$(CPU_FAM).rom.bt_funcs.ld
  LINKFLAGS += -T$(ESP32_SDK_DIR)/components/esp_rom/$(CPU_FAM)/ld/$(CPU_FAM).rom.newlib.ld
else ifeq (esp32c3,$(CPU_FAM))
  LINKFLAGS += -T$(ESP32_SDK_DIR)/components/esp_rom/$(CPU_FAM)/ld/$(CPU_FAM).rom.ble_cca.ld
  LINKFLAGS += -T$(ESP32_SDK_DIR)/components/esp_rom/$(CPU_FAM)/ld/$(CPU_FAM).rom.bt_funcs.ld
  LINKFLAGS += -T$(ESP32_SDK_DIR)/components/esp_rom/$(CPU_FAM)/ld/$(CPU_FAM).rom.newlib.ld
  LINKFLAGS += -T$(ESP32_SDK_DIR)/components/esp_rom/$(CPU_FAM)/ld/$(CPU_FAM).rom.eco3.ld
else ifeq (esp32c6,$(CPU_FAM))
  LINKFLAGS += -T$(ESP32_SDK_DIR)/components/esp_rom/$(CPU_FAM)/ld/$(CPU_FAM).rom.coexist.ld
  LINKFLAGS += -T$(ESP32_SDK_DIR)/components/esp_rom/$(CPU_FAM)/ld/$(CPU_FAM).rom.newlib.ld
  LINKFLAGS += -T$(ESP32_SDK_DIR)/components/esp_rom/$(CPU_FAM)/ld/$(CPU_FAM).rom.pp.ld
  LINKFLAGS += -T$(ESP32_SDK_DIR)/components/esp_rom/$(CPU_FAM)/ld/$(CPU_FAM).rom.phy.ld
  LINKFLAGS += -T$(ESP32_SDK_DIR)/components/esp_rom/$(CPU_FAM)/ld/$(CPU_FAM).rom.net80211.ld
else ifeq (esp32h2,$(CPU_FAM))
  LINKFLAGS += -T$(ESP32_SDK_DIR)/components/esp_rom/$(CPU_FAM)/ld/$(CPU_FAM).rom.newlib.ld
else
  $(error Missing LINKFLAGS for ESP32x SoC variant (family): $(CPU_FAM))
endif

LINKFLAGS += -nostdlib -lgcc -Wl,-gc-sections

# all ESP32x SoCs have to load executable code into IRAM
# warning 'LOAD segment with RWX permissions' has to be disabled therefore
ifeq (1,$(GCC_NEW_RISCV_ISA))
  LINKFLAGS += -Wl,--no-warn-rwx-segments
endif

# Libraries needed when using esp_wifi_any pseudomodule
ifneq (,$(filter esp_wifi_any,$(USEMODULE)))
  LINKFLAGS += -L$(ESP32_SDK_LIB_WIFI_DIR)/$(CPU_FAM)
  LINKFLAGS += -L$(ESP32_SDK_LIB_PHY_DIR)/$(CPU_FAM)
  LINKFLAGS += -L$(ESP32_SDK_LIB_COEXIST_DIR)/$(CPU_FAM)
  ARCHIVES += -lcoexist -lcore -lmesh -lnet80211 -lpp
  ARCHIVES += -lphy -lstdc++
  ifeq (esp32,$(CPU_FAM))
    ARCHIVES += -lrtc
  endif
endif

# Libraries needed when using esp_now module
ifneq (,$(filter esp_now,$(USEMODULE)))
  ARCHIVES += -lespnow -lmesh
endif

# Libraries needed when using esp_ble
ifneq (,$(filter esp_ble,$(USEMODULE)))
  LINKFLAGS += -L$(ESP32_SDK_LIB_PHY_DIR)/$(CPU_FAM)
  ARCHIVES += -lphy -lstdc++
  ifneq (,$(filter esp32 esp32c3 esp32s3,$(CPU_FAM)))
    LINKFLAGS += -L$(ESP32_SDK_LIB_BT_DIR)/$(CPU_FAM)
    ARCHIVES += -lbtdm_app
  else ifneq (,$(filter esp32c6 esp32h2,$(CPU_FAM)))
    LINKFLAGS += -L$(ESP32_SDK_LIB_COEXIST_DIR)/$(CPU_FAM)
    LINKFLAGS += -L$(ESP32_SDK_LIB_BT_DIR)
    ARCHIVES += -lble_app -lcoexist
  endif
  ifeq (esp32,$(CPU_FAM))
    ARCHIVES += -lrtc
  else ifneq (,$(filter esp32c3 esp32c6 esp32h2 esp32s3,$(CPU_FAM)))
    ARCHIVES += -lbtbb
  endif
endif

ifneq (,$(filter esp_ieee802154,$(USEMODULE)))
  ifneq (,$(filter esp32c6 esp32h2,$(CPU_FAM)))
    LINKFLAGS += -L$(ESP32_SDK_LIB_PHY_DIR)/$(CPU_FAM)
    LINKFLAGS += -L$(ESP32_SDK_LIB_BT_DIR)
    ARCHIVES += -lbtbb
    ARCHIVES += -lphy
  endif
endif

ifneq (,$(filter cpp,$(USEMODULE)))
  ARCHIVES += -lstdc++
endif

ifneq (,$(filter esp_bootloader,$(USEMODULE)))
  # Bootloader file used by esptool.inc.mk
  BOOTLOADER_BIN ?= $(BINDIR)/esp_bootloader/bootloader.bin
endif

ifneq (,$(filter esp_jtag,$(USEMODULE)))
  PROGRAMMERS_SUPPORTED += openocd
  PARTITION_POS = 0x8000
  OPENOCD_PRE_FLASH_CMDS = -c 'echo "Installing Bootloader at $(BOOTLOADER_POS)"' \
    -c 'flash write_image erase "$(BOOTLOADER_BIN)" $(BOOTLOADER_POS) bin' \
    -c 'echo "Installing partition table at $(PARTITION_POS)"' \
    -c 'flash write_image erase "$(BINDIR)/partitions.bin" $(PARTITION_POS) bin'
  IMAGE_OFFSET = $(FLASHFILE_POS)
  # Flash checksumming not supported on xtensa
  OPENOCD_SKIP_VERIFY = yes
  # Without resets debug target fails with 'Target not examined yet'
  OPENOCD_DBG_EXTRA_CMD += -c 'reset halt'
endif

LD_SCRIPTS += $(BINDIR)/memory.ld $(BINDIR)/sections.ld
LDGENFLAGS += -DLD_FILE_GEN
LDGENFLAGS += -DRESERVE_RTC_MEM=0x18
LDGENFLAGS += -DESP_BOOTLOADER_RESERVE_RTC=0x18

$(BINDIR)/memory.ld: $(RIOTCPU)/$(CPU)/vendor/ld/$(CPU_FAM)/memory.ld.in \
                     $(BINDIR)/riotbuild/riotbuild.h pkg-prepare
	$(Q)$(CC) $(INCLUDES) -include '$(BINDIR)/riotbuild/riotbuild.h' \
				$(LDGENFLAGS) -I$(RIOTCPU)/$(CPU)/vendor/ld -P -x c -E $< -o $@
$(BINDIR)/sections.ld: $(RIOTCPU)/$(CPU)/vendor/ld/$(CPU_FAM)/sections.ld.in \
                       $(BINDIR)/riotbuild/riotbuild.h pkg-prepare
	$(Q)$(CC) $(INCLUDES) -include '$(BINDIR)/riotbuild/riotbuild.h' \
				$(LDGENFLAGS) -I$(RIOTCPU)/$(CPU)/vendor/ld -C -P -x c -E $< -o $@

$(BOOTLOADER_BIN):
