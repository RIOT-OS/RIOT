diff -crBN Makefile Makefile
*** Makefile
--- Makefile
***************
*** 0 ****
--- 1,3 ----
+ MODULE = tlsf
+ 
+ include $(RIOTBASE)/Makefile.base
diff -crBN tlsf.c tlsf.c
*** tlsf.c
--- tlsf.c
***************
*** 22,34 ****
  /* Private constants: do not modify. */
  enum tlsf_private
  {
- #if defined (TLSF_64BIT)
- 	/* All allocation sizes and addresses are aligned to 8 bytes. */
- 	ALIGN_SIZE_LOG2 = 3,
- #else
  	/* All allocation sizes and addresses are aligned to 4 bytes. */
  	ALIGN_SIZE_LOG2 = 2,
- #endif
  	ALIGN_SIZE = (1 << ALIGN_SIZE_LOG2),
  
  	/*
--- 22,29 ----
***************
*** 42,56 ****
  	** blocks below that size into the 0th first-level list.
  	*/
  
- #if defined (TLSF_64BIT)
- 	/*
- 	** TODO: We can increase this to support larger sizes, at the expense
- 	** of more overhead in the TLSF structure.
- 	*/
- 	FL_INDEX_MAX = 32,
- #else
  	FL_INDEX_MAX = 30,
- #endif
  	SL_INDEX_COUNT = (1 << SL_INDEX_COUNT_LOG2),
  	FL_INDEX_SHIFT = (SL_INDEX_COUNT_LOG2 + ALIGN_SIZE_LOG2),
  	FL_INDEX_COUNT = (FL_INDEX_MAX - FL_INDEX_SHIFT + 1),
--- 37,43 ----
***************
*** 603,778 ****
  	}
  }
  
- /*
- ** Debugging utilities.
- */
- 
- typedef struct integrity_t
- {
- 	int prev_status;
- 	int status;
- } integrity_t;
- 
- #define tlsf_insist(x) { tlsf_assert(x); if (!(x)) { status--; } }
- 
- static void integrity_walker(void* ptr, size_t size, int used, void* user)
- {
- 	block_header_t* block = block_from_ptr(ptr);
- 	integrity_t* integ = tlsf_cast(integrity_t*, user);
- 	const int this_prev_status = block_is_prev_free(block) ? 1 : 0;
- 	const int this_status = block_is_free(block) ? 1 : 0;
- 	const size_t this_block_size = block_size(block);
- 
- 	int status = 0;
- 	tlsf_insist(integ->prev_status == this_prev_status && "prev status incorrect");
- 	tlsf_insist(size == this_block_size && "block size incorrect");
- 
- 	integ->prev_status = this_status;
- 	integ->status += status;
- }
- 
- int tlsf_check(tlsf_t tlsf)
- {
- 	int i, j;
- 
- 	control_t* control = tlsf_cast(control_t*, tlsf);
- 	int status = 0;
- 
- 	/* Check that the free lists and bitmaps are accurate. */
- 	for (i = 0; i < FL_INDEX_COUNT; ++i)
- 	{
- 		for (j = 0; j < SL_INDEX_COUNT; ++j)
- 		{
- 			const int fl_map = control->fl_bitmap & (1 << i);
- 			const int sl_list = control->sl_bitmap[i];
- 			const int sl_map = sl_list & (1 << j);
- 			const block_header_t* block = control->blocks[i][j];
- 
- 			/* Check that first- and second-level lists agree. */
- 			if (!fl_map)
- 			{
- 				tlsf_insist(!sl_map && "second-level map must be null");
- 			}
- 
- 			if (!sl_map)
- 			{
- 				tlsf_insist(block == &control->block_null && "block list must be null");
- 				continue;
- 			}
- 
- 			/* Check that there is at least one free block. */
- 			tlsf_insist(sl_list && "no free blocks in second-level map");
- 			tlsf_insist(block != &control->block_null && "block should not be null");
- 
- 			while (block != &control->block_null)
- 			{
- 				int fli, sli;
- 				tlsf_insist(block_is_free(block) && "block should be free");
- 				tlsf_insist(!block_is_prev_free(block) && "blocks should have coalesced");
- 				tlsf_insist(!block_is_free(block_next(block)) && "blocks should have coalesced");
- 				tlsf_insist(block_is_prev_free(block_next(block)) && "block should be free");
- 				tlsf_insist(block_size(block) >= block_size_min && "block not minimum size");
- 
- 				mapping_insert(block_size(block), &fli, &sli);
- 				tlsf_insist(fli == i && sli == j && "block size indexed in wrong list");
- 				block = block->next_free;
- 			}
- 		}
- 	}
- 
- 	return status;
- }
- 
- #undef tlsf_insist
- 
- static void default_walker(void* ptr, size_t size, int used, void* user)
- {
- 	(void)user;
- 	printf("\t%p %s size: %x (%p)\n", ptr, used ? "used" : "free", (unsigned int)size, block_from_ptr(ptr));
- }
- 
- void tlsf_walk_pool(pool_t pool, tlsf_walker walker, void* user)
- {
- 	tlsf_walker pool_walker = walker ? walker : default_walker;
- 	block_header_t* block =
- 		offset_to_block(pool, -(int)block_header_overhead);
- 
- 	while (block && !block_is_last(block))
- 	{
- 		pool_walker(
- 			block_to_ptr(block),
- 			block_size(block),
- 			!block_is_free(block),
- 			user);
- 		block = block_next(block);
- 	}
- }
- 
- size_t tlsf_block_size(void* ptr)
- {
- 	size_t size = 0;
- 	if (ptr)
- 	{
- 		const block_header_t* block = block_from_ptr(ptr);
- 		size = block_size(block);
- 	}
- 	return size;
- }
- 
- int tlsf_check_pool(pool_t pool)
- {
- 	/* Check that the blocks are physically correct. */
- 	integrity_t integ = { 0, 0 };
- 	tlsf_walk_pool(pool, integrity_walker, &integ);
- 
- 	return integ.status;
- }
- 
- /*
- ** Size of the TLSF structures in a given memory block passed to
- ** tlsf_create, equal to the size of a control_t
- */
- size_t tlsf_size()
- {
- 	return sizeof(control_t);
- }
- 
- size_t tlsf_align_size()
- {
- 	return ALIGN_SIZE;
- }
- 
- size_t tlsf_block_size_min()
- {
- 	return block_size_min;
- }
- 
- size_t tlsf_block_size_max()
- {
- 	return block_size_max;
- }
- 
- /*
- ** Overhead of the TLSF structures in a given memory block passes to
- ** tlsf_add_pool, equal to the overhead of a free block and the
- ** sentinel block.
- */
- size_t tlsf_pool_overhead()
- {
- 	return 2 * block_header_overhead;
- }
- 
- size_t tlsf_alloc_overhead()
- {
- 	return block_header_overhead;
- }
- 
  pool_t tlsf_add_pool(tlsf_t tlsf, void* mem, size_t bytes)
  {
  	block_header_t* block;
  	block_header_t* next;
  
! 	const size_t pool_overhead = tlsf_pool_overhead();
  	const size_t pool_bytes = align_down(bytes - pool_overhead, ALIGN_SIZE);
  
  	if (((ptrdiff_t)mem % ALIGN_SIZE) != 0)
--- 590,601 ----
  	}
  }
  
  pool_t tlsf_add_pool(tlsf_t tlsf, void* mem, size_t bytes)
  {
  	block_header_t* block;
  	block_header_t* next;
  
! 	const size_t pool_overhead = 2 * block_header_overhead;
  	const size_t pool_bytes = align_down(bytes - pool_overhead, ALIGN_SIZE);
  
  	if (((ptrdiff_t)mem % ALIGN_SIZE) != 0)
***************
*** 784,798 ****
  
  	if (pool_bytes < block_size_min || pool_bytes > block_size_max)
  	{
- #if defined (TLSF_64BIT)
- 		printf("tlsf_add_pool: Memory size must be between 0x%x and 0x%x00 bytes.\n", 
- 			(unsigned int)(pool_overhead + block_size_min),
- 			(unsigned int)((pool_overhead + block_size_max) / 256));
- #else
  		printf("tlsf_add_pool: Memory size must be between %u and %u bytes.\n", 
  			(unsigned int)(pool_overhead + block_size_min),
  			(unsigned int)(pool_overhead + block_size_max));
- #endif
  		return 0;
  	}
  
--- 607,615 ----
***************
*** 816,877 ****
  	return mem;
  }
  
- void tlsf_remove_pool(tlsf_t tlsf, pool_t pool)
- {
- 	control_t* control = tlsf_cast(control_t*, tlsf);
- 	block_header_t* block = offset_to_block(pool, -(int)block_header_overhead);
- 
- 	int fl = 0, sl = 0;
- 
- 	tlsf_assert(block_is_free(block) && "block should be free");
- 	tlsf_assert(!block_is_free(block_next(block)) && "next block should not be free");
- 	tlsf_assert(block_size(block_next(block)) == 0 && "next block size should be zero");
- 
- 	mapping_insert(block_size(block), &fl, &sl);
- 	remove_free_block(control, block, fl, sl);
- }
- 
  /*
  ** TLSF main interface.
  */
  
- #if _DEBUG
- int test_ffs_fls()
- {
- 	/* Verify ffs/fls work properly. */
- 	int rv = 0;
- 	rv += (tlsf_ffs(0) == -1) ? 0 : 0x1;
- 	rv += (tlsf_fls(0) == -1) ? 0 : 0x2;
- 	rv += (tlsf_ffs(1) == 0) ? 0 : 0x4;
- 	rv += (tlsf_fls(1) == 0) ? 0 : 0x8;
- 	rv += (tlsf_ffs(0x80000000) == 31) ? 0 : 0x10;
- 	rv += (tlsf_ffs(0x80008000) == 15) ? 0 : 0x20;
- 	rv += (tlsf_fls(0x80000008) == 31) ? 0 : 0x40;
- 	rv += (tlsf_fls(0x7FFFFFFF) == 30) ? 0 : 0x80;
- 
- #if defined (TLSF_64BIT)
- 	rv += (tlsf_fls_sizet(0x80000000) == 31) ? 0 : 0x100;
- 	rv += (tlsf_fls_sizet(0x100000000) == 32) ? 0 : 0x200;
- 	rv += (tlsf_fls_sizet(0xffffffffffffffff) == 63) ? 0 : 0x400; 
- #endif
- 
- 	if (rv)
- 	{
- 		printf("tlsf_create: %x ffs/fls tests failed!\n", rv);
- 	}
- 	return rv;
- }
- #endif
- 
  tlsf_t tlsf_create(void* mem)
  {
- #if _DEBUG
- 	if (test_ffs_fls())
- 	{
- 		return 0;
- 	}
- #endif
- 
  	if (((tlsfptr_t)mem % ALIGN_SIZE) != 0)
  	{
  		printf("tlsf_create: Memory must be aligned to %u bytes.\n",
--- 633,644 ----
***************
*** 887,907 ****
  tlsf_t tlsf_create_with_pool(void* mem, size_t bytes)
  {
  	tlsf_t tlsf = tlsf_create(mem);
! 	tlsf_add_pool(tlsf, (char*)mem + tlsf_size(), bytes - tlsf_size());
  	return tlsf;
  }
  
- void tlsf_destroy(tlsf_t tlsf)
- {
- 	/* Nothing to do. */
- 	(void)tlsf;
- }
- 
- pool_t tlsf_get_pool(tlsf_t tlsf)
- {
- 	return tlsf_cast(pool_t, (char*)tlsf + tlsf_size());
- }
- 
  void* tlsf_malloc(tlsf_t tlsf, size_t size)
  {
  	control_t* control = tlsf_cast(control_t*, tlsf);
--- 654,663 ----
  tlsf_t tlsf_create_with_pool(void* mem, size_t bytes)
  {
  	tlsf_t tlsf = tlsf_create(mem);
! 	tlsf_add_pool(tlsf, (char*)mem + sizeof (control_t), bytes - sizeof (control_t));
  	return tlsf;
  }
  
  void* tlsf_malloc(tlsf_t tlsf, size_t size)
  {
  	control_t* control = tlsf_cast(control_t*, tlsf);
diff -crBN tlsf.h tlsf.h
*** tlsf.h
--- tlsf.h
***************
*** 18,41 ****
  
  #include <stddef.h>
  
- #if defined(__cplusplus)
- extern "C" {
- #endif
- 
  /* tlsf_t: a TLSF structure. Can contain 1 to N pools. */
  /* pool_t: a block of memory that TLSF can manage. */
! typedef void* tlsf_t;
! typedef void* pool_t;
  
  /* Create/destroy a memory pool. */
  tlsf_t tlsf_create(void* mem);
  tlsf_t tlsf_create_with_pool(void* mem, size_t bytes);
- void tlsf_destroy(tlsf_t tlsf);
- pool_t tlsf_get_pool(tlsf_t tlsf);
  
  /* Add/remove memory pools. */
  pool_t tlsf_add_pool(tlsf_t tlsf, void* mem, size_t bytes);
- void tlsf_remove_pool(tlsf_t tlsf, pool_t pool);
  
  /* malloc/memalign/realloc/free replacements. */
  void* tlsf_malloc(tlsf_t tlsf, size_t bytes);
--- 18,37 ----
  
  #include <stddef.h>
  
  /* tlsf_t: a TLSF structure. Can contain 1 to N pools. */
  /* pool_t: a block of memory that TLSF can manage. */
! struct __tlsf;
! struct __pool;
! 
! typedef struct __tlsf *tlsf_t;
! typedef struct __pool *pool_t;
  
  /* Create/destroy a memory pool. */
  tlsf_t tlsf_create(void* mem);
  tlsf_t tlsf_create_with_pool(void* mem, size_t bytes);
  
  /* Add/remove memory pools. */
  pool_t tlsf_add_pool(tlsf_t tlsf, void* mem, size_t bytes);
  
  /* malloc/memalign/realloc/free replacements. */
  void* tlsf_malloc(tlsf_t tlsf, size_t bytes);
***************
*** 43,68 ****
  void* tlsf_realloc(tlsf_t tlsf, void* ptr, size_t size);
  void tlsf_free(tlsf_t tlsf, void* ptr);
  
- /* Returns internal block size, not original request size */
- size_t tlsf_block_size(void* ptr);
- 
- /* Overheads/limits of internal structures. */
- size_t tlsf_size();
- size_t tlsf_align_size();
- size_t tlsf_block_size_min();
- size_t tlsf_block_size_max();
- size_t tlsf_pool_overhead();
- size_t tlsf_alloc_overhead();
- 
- /* Debugging. */
- typedef void (*tlsf_walker)(void* ptr, size_t size, int used, void* user);
- void tlsf_walk_pool(pool_t pool, tlsf_walker walker, void* user);
- /* Returns nonzero if any internal consistency check fails. */
- int tlsf_check(tlsf_t tlsf);
- int tlsf_check_pool(pool_t pool);
- 
- #if defined(__cplusplus)
- };
- #endif
- 
  #endif
--- 39,42 ----
