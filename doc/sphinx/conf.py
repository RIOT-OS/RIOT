# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import sys
import pathlib

this_dir = pathlib.Path(__file__).parent

# -- Project information -----------------------------------------------------

project = 'RIOT'
copyright = '2018, RIOT Contributors'
author = 'RIOT Contributors'

# The short X.Y version
version = ''
# The full version, including alpha/beta/rc tags
release = '0.1.1'


# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'antidox',
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = 'en'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path .
exclude_patterns = ['xml', '_build', 'Thumbs.db', '.DS_Store', 'RIOT']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'alabaster'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}


# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'Exampledoc'


# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'Example.tex', 'Example Documentation',
     'Juan I Carrano', 'manual'),
]


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'example', 'Example Documentation',
     [author], 1)
]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'Example', 'Example Documentation',
     author, 'Example', 'One line description of project.',
     'Miscellaneous'),
]

# -- Options for antidox -----------------------------------------------------

antidox_doxy_xml_dir = str(pathlib.Path(this_dir, "../doxygen/xml"))
#antidox_xml_stylesheet = "custom.xsl"

# The following lines will show up in antidox's docs, so update the user guide
# if this file is modified.

import antidox.doxy
import antidox.directives
import re

_SINGLE_UNDERSCORE = re.compile("^_[^_].*")

def struct_no_undescore(app, this, options, children):
    """Handle the antidox-include-children event and cause it to skip struct
    members that start with a single underscore"""
    db = app.env.antidox_db

    if db.get(this)['kind'] == antidox.doxy.Kind.STRUCT:
        for el in [(k, v) for k, v in children
                    if _SINGLE_UNDERSCORE.fullmatch(db.get(k)['name'])]:
            children.remove(el)


def group_no_files(app, this, options, children):
    """Exclude files from groups' documentations"""
    db = app.env.antidox_db

    if db.get(this)['kind'] == antidox.doxy.Kind.GROUP:
        for el in [(k, v) for k, v in children
                   if db.get(k)['kind'] == antidox.doxy.Kind.FILE]:
            children.remove(el)


# -- Hacks for Read the Docs ------------------------------------------
#  This will only be used when we are inside RTD
#  Taken from http://breathe.readthedocs.io/en/latest/readthedocs.html

import subprocess

read_the_docs_build = os.environ.get('READTHEDOCS', None) == 'True'

def _run_cmd(cmd):
    """Run an arbitrary command and check exit status"""
    try:
        retcode = subprocess.call(cmd, shell=True)
        if retcode < 0:
            sys.stderr.write("command terminated by signal %s" % (-retcode))
    except OSError as e:
        sys.stderr.write("command execution failed: %s" % e)

def generate_doxygen(app, config):
    """Run the doxygen make commands if we're on the ReadTheDocs server"""
    if read_the_docs_build:
        _run_cmd("make -C {} sphinx-prereq".format(this_dir))

def setup(app):
    app.connect("antidox-include-children", struct_no_undescore)
    app.connect("antidox-include-children", group_no_files)
    app.connect("config-inited", generate_doxygen)
