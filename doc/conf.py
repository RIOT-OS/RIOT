# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import sys

# -- Project information -----------------------------------------------------

project = 'RIOT OS'
copyright = '2018, The RIOT Contributors'
author = 'The RIOT Contributors'

# The short X.Y version
version = ''
# The full version, including alpha/beta/rc tags
release = '2018.04'

read_the_docs_build = os.environ.get('READTHEDOCS', None) == 'True'

# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.todo',
    'sphinx.ext.viewcode',
    'sphinx.ext.mathjax',
    'sphinx.ext.extlinks',
    'breathe'
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
source_suffix = ['.rst', '.md']
#source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path .
exclude_patterns = ['xml', '_build', 'html']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'classic' if not read_the_docs_build else 'sphinx_rtd_theme'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}


# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'RIOTOSdoc'


# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'RIOTOS.tex', 'RIOT OS Documentation',
     'The RIOT Contributors', 'manual'),
]


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'riotos', 'RIOT OS Documentation',
     [author], 1)
]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'RIOTOS', 'RIOT OS Documentation',
     author, 'RIOTOS', 'One line description of project.',
     'Miscellaneous'),
]


# -- Extension configuration -------------------------------------------------

# -- Options for todo extension ----------------------------------------------

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True

# -- Options for recommonmark

source_parsers = {
   '.md': 'recommonmark.parser.CommonMarkParser',
}

# -- Options for parsing markdown --------------------------------------------

from recommonmark.transform import AutoStructify

def setup(app):
    app.add_config_value('recommonmark_config', {
            'enable_auto_toc_tree': True
            }, True)
    app.add_transform(AutoStructify)

# -- Options for Breathe -----------------------------------------------------

_doxyxml_path = os.path.join('doxygen', 'xml')

breathe_projects = { "riot": _doxyxml_path }
breathe_default_project = "riot"

# If we don't specify this, breathe will use the cpp domain and qualifiers such
# as restrict will cause errors.
breathe_domain_by_extension = {
        "h" : "c",
        "c" : "c",
        }

# -- Hacks for Read the Docs ------------------------------------------
#  This will only be used when we are inside RTD
#  Taken from http://breathe.readthedocs.io/en/latest/readthedocs.html

import subprocess, sys

def _run_cmd(cmd):
    """Run an arbitrary command and check exit status"""
    try:
        retcode = subprocess.call(cmd, shell=True)
        if retcode < 0:
            sys.stderr.write("command terminated by signal %s" % (-retcode))
    except OSError as e:
        sys.stderr.write("command execution failed: %s" % e)

def generate_doxygen_breathe(app):
    """Run the doxygen make commands if we're on the ReadTheDocs server"""
    if read_the_docs_build:
        _run_cmd("cd doxygen; make xml")
        _run_cmd("breathe-apidoc -g group -o breathe doxygen/xml")
        _run_cmd("rm breathe/group/group__boards__*")
        _run_cmd("rm breathe/group/group__cpu__*")


def setup(app):
    """Add hook for building doxygen xml when needed"""
    app.connect("builder-inited", generate_doxygen_breathe)

