# define the cpu used by the arduino mega2560 board
export CPU = atmega256rfr2
export CPU_MODEL = atmega256rfr2

export TERMPROG = $(RIOTBASE)/dist/tools/pyterm/pyterm
export TERMFLAGS = -b 9600 -p $(PORT)

#define the flash-tool and default port depending on the host operating system
OS = $(shell uname)
ifeq ($(OS),Linux)
  PORT ?= /dev/ttyACM0
  FLASHER = avrdude
  export FLASHER_PATH ="/etc/avrdude.conf"
  export FFLAGS += -p atmega256rfr2 -c $(PROGRAMMER) $(PROGRAMMER_FLAGS) -D -U flash:w:bin/$(BOARD)/$(PROJECT)$(APPLICATION).hex:i -C $(FLASHER_PATH) 
  #export FFLAGS += -p atmega256rfr2 -c $(PROGRAMMER) $(PROGRAMMER_FLAGS) -n -v -U lfuse:r:-:h -U hfuse:r:-:h -U efuse:r:-:h  -C $(FLASHER_PATH) 
#-U lfuse:r:-:i -U hfuse:r:-:i -U efuse:r:-:i 
else ifeq ($(OS),Darwin)
  PORT ?= $(firstword $(sort $(wildcard /dev/tty.usbmodem*)))
  FLASHER = avrdude
else ifeq ($(OS),MINGW32_NT-6.2) 
# Windows MINGW32 Environment 
	PORT ?= COM5
	FLASHER = avrdude
	export FLASHER_PATH ="C:/avrdude/avrdude.conf"
	export FFLAGS += -p atmega256rfr2 -c $(PROGRAMMER) $(PROGRAMMER_FLAGS) -D -U flash:w:bin/$(BOARD)/$(PROJECT)$(APPLICATION).hex:i -C $(FLASHER_PATH)
	
else
  $(info CAUTION: No flash tool for your host system found!)
  # TODO: fix for building under windows
endif
export FLASHER
export PORT
export DIST_PATH = $(RIOTBOARD)/$(BOARD)/dist
export DEBUGSERVER_PORT = 4242
export DEBUGSERVER = $(DIST_PATH)/debug_srv.sh
export DEBUGSERVER_FLAGS = "-g -j usb :$(DEBUGSERVER_PORT)"
export DEBUGGER_FLAGS = "-x $(RIOTBOARD)/$(BOARD)/dist/gdb.conf $(ELFFILE)"
export DEBUGGER = $(DIST_PATH)/debug.sh $(DEBUGSERVER_FLAGS) $(DIST_PATH) $(DEBUGSERVER_PORT)

# PROGRAMMER defaults to wiring which is the internal flasher via USB. Can be
# overridden for debugging (which requires changes that require to use an ISP)
export PROGRAMMER ?= wiring

ifeq ($(PROGRAMMER),wiring)
    export PROGRAMMER_FLAGS =-P $(PORT) -b 115200
endif

# define build specific options
export CFLAGS_CPU   = -mmcu=atmega256rfr2  $(CFLAGS_FPU)
export CFLAGS_LINK  = -fno-builtin -fshort-enums
export CFLAGS_DBG   = -ggdb -g3
export CFLAGS_OPT  ?= -Os

# -Wl,--relax  -mrelax 
export CFLAGS += -mrelax -Wl,--relax -Wl,-V $(CFLAGS_CPU) $(CFLAGS_LINK) $(CFLAGS_DBG) $(CFLAGS_OPT) 
export ASFLAGS += --linkrelax $(CFLAGS_CPU) $(CFLAGS_DBG)
export LINKFLAGS += -Wl,-t -mrelax -Wl,--relax $(CFLAGS_CPU) $(CFLAGS_DBG) $(CFLAGS_OPT) -e reset_handler

#export OFLAGS += -j .text -j .data -O ihex
#export FFLAGS += -p m2560 -c $(PROGRAMMER) $(PROGRAMMER_FLAGS) -F -D -U flash:w:bin/$(BOARD)/$(PROJECT)$(APPLICATION).hex

export OFLAGS += -O ihex -R .eeprom -R .fuse -R .lock -R .signature -R .user_signatures


ifeq ($(LTO),1)
  # avr-gcc <4.8.3 has a bug when using LTO which causes a warning to be printed always:
  # '_vector_25' appears to be a misspelled signal handler [enabled by default]
  # See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=59396
  export LINKFLAGS += -Wno-error
endif
