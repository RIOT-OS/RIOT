ifeq (, $(__RIOTBUILD_FLAG))
    $(error You cannot build a module on its own. Use "make" in your application's directory instead.)
endif

unexport DIRS
DIRS := $(abspath ${DIRS})

MODULE ?= $(shell basename $(CURDIR))

.PHONY: all ${DIRS:%=ALL--%} ${DIRS:%=CLEAN--%}

all: $(BINDIR)$(MODULE).a ..nothing

..nothing:
	@:

clean:: ${DIRS:%=CLEAN--%}

${DIRS:%=ALL--%}:
	"$(MAKE)" -C ${@:ALL--%=%}

${DIRS:%=CLEAN--%}:
	"$(MAKE)" -C ${@:CLEAN--%=%} clean

# Collect sources to compiled if not specified.
ifeq ($(strip $(SRC)),)
    SRC = $(wildcard *.c)
endif
ifeq ($(strip $(SRCXX)),)
    SRCXX := $(wildcard *.cpp)
endif
ifeq ($(strip $(ASMSRC)),)
    ASMSRC := $(wildcard *.s)
endif
ifeq ($(strip $(ASSMSRC)),)
    ASSMSRC := $(wildcard *.S)
endif

# Filter out unwanted / conditional source files.
ifneq ($(strip $(SRC_BLACKLIST)),)
    SRC     := $(filter-out $(SRC_BLACKLIST), $(SRC))
    SRCXX   := $(filter-out $(SRC_BLACKLIST), $(SRCXX))
    ASMSRC  := $(filter-out $(SRC_BLACKLIST), $(ASMSRC))
    ASSMSRC := $(filter-out $(SRC_BLACKLIST), $(ASSMSRC))
endif
ifneq ($(strip $(SRC_WHITELIST)),)
    SRC     := $(filter $(SRC_WHITELIST), $(SRC))
    SRCXX   := $(filter $(SRC_WHITELIST), $(SRCXX))
    ASMSRC  := $(filter $(SRC_WHITELIST), $(ASMSRC))
    ASSMSRC := $(filter $(SRC_WHITELIST), $(ASSMSRC))
endif

# Compile into output directory.
OBJC    := $(SRC:%.c=$(BINDIR)$(MODULE)/%.o)
OBJCXX  := $(SRCXX:%.cpp=$(BINDIR)$(MODULE)/%.o)
ASMOBJ  := $(ASMSRC:%.s=$(BINDIR)$(MODULE)/%.o)
ASSMOBJ := $(ASSMSRC:%.S=$(BINDIR)$(MODULE)/%.o)
OBJ     := $(OBJC) $(OBJCXX) $(ASMOBJ) $(ASSMOBJ)

$(BINDIR)$(MODULE).a: $(OBJ) ${DIRS:%=ALL--%}
	@mkdir -p $(BINDIR)$(MODULE)
	$(AD)$(AR) -rc $(BINDIR)$(MODULE).a $(OBJ) $(ASMOBJ)

# Pull in dependency info for *existing* .o files.
# Deleted header files will be silently ignored.
-include $(OBJ:.o=.d)

# Compile and generate dependency info.
$(OBJC): $(BINDIR)$(MODULE)/%.o: %.c
	@mkdir -p $(BINDIR)$(MODULE)
	$(AD)$(CC) $(CFLAGS) $(INCLUDES) -MD -MP -c -o $(BINDIR)$(MODULE)/$*.o $(abspath $*.c)

$(OBJCXX): $(BINDIR)$(MODULE)/%.o: %.cpp
	@mkdir -p $(BINDIR)$(MODULE)
	$(AD)$(CXX) $(filter-out $(CXXUWFLAGS), $(CFLAGS)) $(CXXEXFLAGS) $(INCLUDES) -MD -MP -c -o $(BINDIR)$(MODULE)/$*.o $(abspath $*.cpp)

$(ASMOBJ): $(BINDIR)$(MODULE)/%.o: %.s
	@mkdir -p $(BINDIR)$(MODULE)
	$(AD)$(AS) $(ASFLAGS) $*.s -o $(BINDIR)$(MODULE)/$*.o

$(ASSMOBJ): $(BINDIR)$(MODULE)/%.o: %.S
	@mkdir -p $(BINDIR)$(MODULE)
	$(AD)$(CC) $(CFLAGS) $(INCLUDES) -MD -MP -c -o $(BINDIR)$(MODULE)/$*.o $(abspath $*.S)
