ifeq (, $(__RIOTBUILD_FLAG))
  $(error You cannot build a module on its own. Use "make" in your application's directory instead.)
endif

MODULE_DIR ?= $(CURDIR)
MODULE     ?= $(shell basename $(MODULE_DIR))

# Add MODULE_DIR to files path to work from another dir than CURDIR
D := $(MODULE_DIR)

.PHONY: all

all: $(BINDIR)/$(MODULE).a

# dir_wildcard: Same as 'wildcard' but for given directory
#   call dir_wildcard,PATTERN,DIRECTORY
#   The 'DIRECTORY' part is not included in returned paths
dir_wildcard = $(patsubst $(2)/%,%,$(wildcard $(2)/$(1)))

## submodules
ifeq (1, $(SUBMODULES))
  # don't use *.c as SRC if SRC is empty (e.g., no module selected)
  NO_AUTO_SRC := 1

  # allow different submodule basename (e.g., MODULE=cpu_periph_common, but match just periph_%)
  BASE_MODULE ?= $(MODULE)

  # for each $(BASE_MODULE)_<name> in USEMODULE, add <name>.c to SRC
  SRC += $(patsubst $(BASE_MODULE)_%,%.c,$(filter $(BASE_MODULE)_%,$(USEMODULE)))

  # don't fail if a selected *.c file does not exist
  ifeq (1, $(SUBMODULES_NOFORCE))
    SRC := $(filter $(SRC), $(call dir_wildcard,*.c,$(D)))
  endif
endif

ifeq ($(strip $(SRC))$(NO_AUTO_SRC),)
  SRC := $(call dir_wildcard,*.c,$(D))
  SRC := $(filter-out $(SRC_NOLTO), $(SRC))
endif
ifeq ($(strip $(SRCXX))$(NO_AUTO_SRC),)
  SRCXX := $(call dir_wildcard,*.cpp,$(D))
endif
ifeq ($(strip $(ASMSRC))$(NO_AUTO_SRC),)
  ASMSRC := $(call dir_wildcard,*.s,$(D))
endif
ifeq ($(strip $(ASSMSRC))$(NO_AUTO_SRC),)
  ASSMSRC := $(call dir_wildcard,*.S,$(D))
endif

OBJC_LTO    := $(SRC:%.c=$(BINDIR)/$(MODULE)/%.o)
OBJC_NOLTO  := $(SRC_NOLTO:%.c=$(BINDIR)/$(MODULE)/%.o)
OBJC        := $(OBJC_NOLTO) $(OBJC_LTO)
OBJCXX      := $(SRCXX:%.cpp=$(BINDIR)/$(MODULE)/%.o)
ASMOBJ      := $(ASMSRC:%.s=$(BINDIR)/$(MODULE)/%.o)
ASSMOBJ     := $(ASSMSRC:%.S=$(BINDIR)/$(MODULE)/%.o)

OBJ := $(OBJC) $(OBJCXX) $(ASMOBJ) $(ASSMOBJ)
DEP := $(OBJC:.o=.d) $(OBJCXX:.o=.d) $(ASSMOBJ:.o=.d)

$(BINDIR)/$(MODULE).a: $(OBJ)
	$(Q)$(AR) $(ARFLAGS) $@ $?

$(BINDIR)/$(MODULE).a $(OBJ): | $(BINDIR)/$(MODULE)/

$(BINDIR)/$(MODULE)/:
	$(Q)mkdir -p $@

CXXFLAGS = $(filter-out $(CXXUWFLAGS), $(CFLAGS)) $(CXXEXFLAGS)
CCASFLAGS = $(filter-out $(CCASUWFLAGS), $(CFLAGS)) $(CCASEXFLAGS)

# compile and generate dependency info

$(OBJC_LTO): CFLAGS+=$(LTOFLAGS)

$(OBJC): $(BINDIR)/$(MODULE)/%.o: $(D)/%.c $(RIOTBUILD_CONFIG_HEADER_C)
	$(Q)$(CCACHE) $(CC) \
		-DRIOT_FILE_RELATIVE=\"$(patsubst $(RIOTBASE)/%,%,$(abspath $<))\" \
		-DRIOT_FILE_NOPATH=\"$(notdir $<)\" \
		$(CFLAGS) $(INCLUDES) -MD -MP -c -o $@ $(abspath $<)

$(OBJCXX): $(BINDIR)/$(MODULE)/%.o: $(D)/%.cpp $(RIOTBUILD_CONFIG_HEADER_C)
	$(Q)$(CCACHE) $(CXX) \
		-DRIOT_FILE_RELATIVE=\"$(patsubst $(RIOTBASE)/%,%,$(abspath $<))\" \
		-DRIOT_FILE_NOPATH=\"$(notdir $<)\" \
		$(CXXFLAGS) $(CXXINCLUDES) $(INCLUDES) -MD -MP -c -o $@ $(abspath $<)

$(ASMOBJ): $(BINDIR)/$(MODULE)/%.o: $(D)/%.s
	$(Q)$(AS) $(ASFLAGS) -o $@ $(abspath $<)

$(ASSMOBJ): $(BINDIR)/$(MODULE)/%.o: $(D)/%.S $(RIOTBUILD_CONFIG_HEADER_C)
	$(Q)$(CCAS) $(CCASFLAGS) $(INCLUDES) -MD -MP -c -o $@ $(abspath $<)


# Building DIRS

unexport DIRS
DIRS := $(sort $(abspath ${DIRS}))
.PHONY: ${DIRS:%=ALL--%} ${DIRS:%=CLEAN--%}

clean:: ${DIRS:%=CLEAN--%}

${DIRS:%=ALL--%}:
	$(QQ)"$(MAKE)" -C ${@:ALL--%=%}

${DIRS:%=CLEAN--%}:
	$(QQ)"$(MAKE)" -C ${@:CLEAN--%=%} clean

$(BINDIR)/$(MODULE).a $(OBJ): | ${DIRS:%=ALL--%}

# No message when changing directory and nothing to do
all:	..nothing_$(MODULE)
..nothing_$(MODULE):
	@:


# pull in dependency info for *existing* .o files
# deleted header files will be silently ignored
-include $(DEP)
