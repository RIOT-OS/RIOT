##########################################################################################
# Customize file classifications.                                                        #
# Results from files under any classifier will be excluded from LGTM                     #
# statistics.                                                                            #
##########################################################################################

##########################################################################################
# Use the `path_classifiers` block to define changes to the default classification of    #
# files.                                                                                 #
##########################################################################################

path_classifiers:
  docs:
    # Identify the top-level directory doc/ as documentation-related.
    - doc
    # as well as all *.md files in top level
    - "*.md"
    # and all *.md and *.txt files in sub-directories
    - "**/*.md"
    - "**/*.txt"
  test:
    # Override LGTM's default classification of test files by excluding all files.
    - exclude: /
    # Classify all files in the top-level directory tests/ as test code.
    - tests
  # Define your own category, for example: 'some_custom_category'.
  dist:
    # Classify all files in the top-level directory dist/ (or the top-level file
    # called tools).
    - dist/

#########################################################################################
# Use the `queries` block to change the default display of query results.               #
#########################################################################################

queries:
  # Start by hiding the results of all queries.
  - exclude: "*"
  # Then include all queries tagged 'security' and 'correctness', and with a severity of
  # 'error'.
  - include:
      tags:
        - "security"
        - "correctness"
      severity: "error"
  # Specifically hide the results of two queries.
  - exclude: cpp/use-of-goto

#########################################################################################
# Define changes to the default code extraction process.                                #
# Each block configures the extraction of a single language, and modifies actions in a  #
# named step. Every named step includes automatic default actions,                      #
# except for the 'prepare' step. The steps are performed in the following sequence:     #
# prepare                                                                               #
# after_prepare                                                                         #
# configure (C/C++ only)                                                                #
# python_setup (Python only)                                                            #
# before_index                                                                          #
# index                                                                                 #
##########################################################################################

#########################################################################################
# Environment variables available to the steps:                                         #
#########################################################################################

# LGTM_SRC
#   The root of the source tree.
# LGTM_WORKSPACE
#   An existing (initially empty) folder outside the source tree.
#   Used for temporary download and setup commands.

#########################################################################################
# Use the extraction block to define changes to the default code extraction process     #
# for one or more languages. The settings for each language are defined in a child      #
# block, with one or more steps.                                                        #
#########################################################################################

extraction:
  # Define settings for C/C++ analysis
  #####################################
  cpp:
    # Add an `after-prepare` step if you need to run commands after the prepare step.
    # Each command should be listed on a separate line.
    # This step is useful for C/C++ analysis where you want to prepare the environment
    # for the `configure` step without changing the default behavior for that step.
    after_prepare:
      - export GNU_MAKE=make
      - export GIT=true
    configure:
      command:
        - true
    # The `index` step builds the code and extracts information during the build
    # process.
    index:
      # Override the autobuild process by specifying a list of custom build commands
      # to use instead.
      build_command:
        - $LGTM_SRC/dist/tools/compile_test/compile_test.py

  # disable JavaScript by default
  javascript:
    index:
      exclude:
        - /

  # Define settings for Python analysis
  ######################################
  python:
    # The `prepare` step exists for customization on LGTM.com only.
    # prepare:
    #   # The `packages` section is valid for LGTM.com only. It names packages to
    #   # be installed.
    #   packages: libpng-dev
    # This step is useful for Python analysis where you want to prepare the
    # environment for the `python_setup` step without changing the default behavior
    # for that step.
    # after_prepare:
    #   - export PATH=$LGTM_WORKSPACE/tools:$PATH
    #   # This sets up the Python interpreter and virtual environment, ready for the
    #   # `index` step to extract the codebase.
    python_setup:
      # Specify packages that should NOT be installed despite being mentioned in the
      # requirements.txt file.
      # Default: no package marked for exclusion.
      # exclude_requirements:
      #   - pywin32
      # Specify a list of pip packages to install.
      # If any of these packages cannot be installed, the extraction will fail.
      requirements:
        - pyasn1==0.4.2
        - ecdsa==0.13.3
        - flake8==3.5.0
        - pexpect==4.2.1
        - pycrypto==2.6.1
        - pyserial==3.4
        - ed25519==1.4
        - cbor==1.0.0
        - cryptography==2.6.1
        - scapy>=2.4.3
        - codespell==1.16.0
        - protobuf==3.10.0
        - scikit-learn==0.22.1
        - joblib==0.14.0
        - emlearn==0.10.1
      # Specify a list of requirements text files to use to set up the environment,
      # or false for none. Default: any requirements.txt, test-requirements.txt,
      # and similarly named files identified in the codebase are used.
      # requirements_files:
      #   - required-packages.txt
      # Specify a setup.py file to use to set up the environment, or false for none.
      # Default: any setup.py files identified in the codebase are used in preference
      # to any requirements text files.
      # setup_py: new-setup.py
      # Override the version of the Python interpreter used for setup and extraction
      # Default: Python 3 if no version is explicitly specified, and if there are no
      # commits to the repository before January 1, 2017. Otherwise Python 2.
      version: 3
    # Optional step. You should add a `before_index` step if you need to run commands
    # before the `index` step.
    # before_index:
    #   - antlr4 -Dlanguage=Python3 Grammar.g4
    # The `index` step extracts information from the files in the codebase.
    # index:
    #   # Specify a list of files and folders to exclude from extraction.
